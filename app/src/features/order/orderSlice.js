import { createAsyncThunk, createSlice } from "@reduxjs/toolkit";
import { fetchAllOrderForAdmin, placeOrder, updateOrder } from "./orderAPI";

const initialState = {
  orders: [],
  currentOrder: null,
  allOrders: [],
  status: "idle",
};

export const placeOrderAsync = createAsyncThunk(
  "orders/placeOrder",
  async (order) => {
    const response = await placeOrder(order);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const fetchAllOrderForAdminAsync = createAsyncThunk(
  "product/fetchAllOrderForAdmin",
  async () => {
    const response = await fetchAllOrderForAdmin();
    return response.data;
  }
);
export const updateOrderAsync = createAsyncThunk(
  "product/updateOrder",
  async (update) => {
    const response = await updateOrder(update);
    return response.data;
  }
);

export const orderSlice = createSlice({
  name: "orders",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    resetOrder: (state) => {
      state.currentOrder = null;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(placeOrderAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(placeOrderAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.orders.unshift(action.payload);
        state.currentOrder = action.payload;
      })
      .addCase(fetchAllOrderForAdminAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(fetchAllOrderForAdminAsync.fulfilled, (state, action) => {
        state.status = "idle";
        state.allOrders = action.payload;
      })
      .addCase(updateOrderAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(updateOrderAsync.fulfilled, (state, action) => {
        state.status = "idle";
        const index = state.allOrders.findIndex(
          (order) => order.id === action.payload.id
        );
        state.allOrders[index] = action.payload;
      });
  },
});

export const { resetOrder } = orderSlice.actions;

export const selectUserOrderInfo = (state) => state.orders.orders;
export const selectCurrentOrder = (state) => state.orders.currentOrder;
export const selectAllOrderForAdmin = (state) => state.orders.allOrders;
export default orderSlice.reducer;
